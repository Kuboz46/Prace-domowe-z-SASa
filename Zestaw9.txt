/*
LABORATORIUM NR: 9
IMIE I NAZWISKO: Jakub Zbrzezny
NUMER ALBUMU: 286689
NUMERY ROZWIAZANYCH ZADAN: 1, 2, 3, 4, 5, 6, 7 (wszystkie)
UWAGI:
*/

/*deklaracja bibliotek*/
Libname lib '/folders/myfolders/Praca_domowa_8'; /* U mnie w folderze Praca_domowa_8 są wszystkie pliki, które podano do zestawu dziewiątego. */

/*zadanie 1****************************************************************;*/

/* "Like it" */

proc sql;
select * from
(
    select rental.nr_miejsca, count(hire.nr_wypozyczenia) as liczba_wypozyczen
    from lib.l09z01_wypozyczalnie rental
    left join lib.l09z01_wypozyczenia hire /* Używam left join, ponieważ biorę wypozyczalnie nawet, gdy nie ma wypożyczeń,
    gdyż nie w każdej wypożyczalni muszą być wypożyczenia, ale wypożyczenia z jakieś wypożyczalni muszą być. */
    on rental.nr_miejsca = hire.nr_miejsca_wyp
    where hire.data_wyp between '1999-01-01' and '1999-06-06'
    group by rental.nr_miejsca
)
having liczba_wypozyczen=max(liczba_wypozyczen)
;
quit;


/* Lubię Opla */

proc sql;
select distinct clients.nr_klienta, clients.nazwisko, clients.imie
from lib.l09z01_klienci clients
inner join lib.l09z01_wypozyczenia hire1
on hire1.nr_klienta = clients.nr_klienta
where
(
    select count(hire2.nr_klienta)
    from lib.l09z01_wypozyczenia hire2
    where hire2.nr_klienta=clients.nr_klienta
) > 1
and
    exists
    (
    select cars.nr_samochodu
    from lib.l09z01_samochody cars
    inner join lib.l09z01_wypozyczenia hire3
    on cars.nr_samochodu=hire3.nr_samochodu where hire3.nr_klienta=clients.nr_klienta and cars.marka='OPEL'
    )
;
quit;

/* Długo poza stajnią */

proc sql;
select hire.nr_miejsca_wyp,cars.nr_samochodu,
sum(intck("day", input(data_wyp, yymmdd10.), input(data_odd,yymmdd10.))) as czas_wyp_dni /* Liczba wszystkich dni wypożycznia. */
from lib.l09z01_samochody cars
inner join lib.l09z01_wypozyczenia hire
on cars.nr_samochodu = hire.nr_samochodu /* Patrzymy tylko na samochody kiedyś wypożyczone. */
where hire.data_wyp between '1998-10-01' and '1998-12-31'
  group by hire.nr_miejsca_wyp, cars.nr_samochodu
  order by hire.nr_miejsca_wyp , czas_wyp_dni desc
;
quit;

/* Testerzy */

proc sql;
select distinct client.nr_klienta, client.nazwisko
from lib.l09z01_klienci client
where
(
    select count(*) as liczba_wyp
    from  lib.l09z01_wypozyczenia hire
    where hire.nr_klienta = client.nr_klienta
) > 1
and
(
    select count(distinct s.marka )
    from lib.l09z01_samochody s
    inner join lib.l09z01_wypozyczenia p
    on s.nr_samochodu=p.nr_samochodu
    where p.nr_klienta=client.nr_klienta
)
=
(
    select count(*) as liczba_wyp
    from  lib.l09z01_wypozyczenia hire
    where hire.nr_klienta = client.nr_klienta
) /* Klient nigdy nie brał drugi raz tego samego auta,
czyli liczba wypożyczeń jest równa liczbie wypożyczonych różnych marek samochodów. */
;
quit;

/* Obiboki */

proc sql;
select distinct emp.nr_pracownika, emp.imie, emp.nazwisko
from lib.l09z01_pracownicy emp
where
not exists
(
    select hire.nr_wypozyczenia
    from lib.l09z01_wypozyczenia hire
    where
        hire.nr_pracow_wyp = emp.nr_pracownika
    and
        hire.data_wyp between '1999-10-01' and '2000-02-29'
)
;
quit;

/* Nieoczekiwana zamiana miejsc */

proc sql; /* Zakładam, że jeśli nie ma miejsca oddania, to ktoś nie oddał samochodu, czyli tego nie liczę. */
select distinct lend.wypozyczajacy, borrow.przyjmujacy, borrow.numer
from
(
    (
        select  emp.nr_pracownika || emp.imie || emp.nazwisko as wypozyczajacy, hire.nr_wypozyczenia as numer
        from lib.l09z01_wypozyczenia hire
        left join lib.l09z01_pracownicy emp
        on hire.nr_pracow_wyp = emp.nr_pracownika
        where hire.nr_miejsca_wyp ^= hire.nr_miejsca_odd and hire.nr_miejsca_odd ^=''
    ) lend
    inner join
    (
        select  emp.nr_pracownika || emp.imie || emp.nazwisko as przyjmujacy, hire.nr_wypozyczenia as numer
        from lib.l09z01_wypozyczenia hire
        left join lib.l09z01_pracownicy emp
        on hire.nr_pracow_odd = emp.nr_pracownika
        where hire.nr_miejsca_wyp ^= hire.nr_miejsca_odd  and hire.nr_miejsca_odd ^=''
    ) borrow
    on lend.numer=borrow.numer
)
/* Numer wypożyczenia jednoznacznie identyfikuje wypożyczenie. */
order by borrow.numer
;
quit;

/* Przodownik pracy */

proc sql;
select  emp.nr_pracownika, emp.imie, emp.nazwisko
from lib.l09z01_pracownicy emp
where
    year(input(emp.data_zatr,yymmdd10.)) < 1998
and
    emp.nr_pracownika in
    (
        select nr_pracow_wyp
        from
        (
            select nr_pracow_wyp ,sum(intck("day", input(data_wyp,yymmdd10.), input(data_odd,yymmdd10.))*cena_jedn) as income
            from lib.l09z01_wypozyczenia
            where year(input(data_wyp,yymmdd10.)) = 1999
            group by nr_pracow_wyp
        )
        having income = max(income)
    )
/* dochód = (dni wypożyczenia) * (cena jednostkowa) */
;
quit;

/* Agent 006 */

proc sql; /* koszt = (cena jednostkowa) * (liczba dni wypożyczenia) */
select distinct hire.data_wyp, hire.data_odd, clients.nazwisko,
intck("day", input(hire.data_wyp,yymmdd10.), input(hire.data_odd,yymmdd10.)) * hire.cena_jedn as koszt
from lib.l09z01_wypozyczenia hire
left join lib.l09z01_klienci clients
on clients.nr_klienta = hire.nr_klienta
where hire.nr_samochodu in('000006')
;
quit; /* Tutaj wychodzi zbiór pusty, zatem samochód 000006 nie był nigdy wypożyczony. */

/* Sprawdzam, czy w zbiorze l09z01_wypozyczenia istnieje samochód 000006. */

proc sql;
select nr_samochodu
from lib.l09z01_wypozyczenia
where nr_samochodu in ('000006')
;
quit;

/* Zatem tamten wynik jest prawidłowy, gdyż w zbiorze l09z01_wypozyczenia nie istnieje samochód 000006. */

/*zadanie 2****************************************************************;*/

libname FORM "/folders/myfolders/Praca_domowa_8/FORM";
options fmtsearch=(FORM);

data FORM.zbior_z_formatem(drop = id);

    length FMTNAME $7 TYPE $1 LABEL $3; /* FMTNAME - nazwa formatu */
      /* TYPE - typ formatu */
     /* LABEL = etykieta wyswietlana dla wartosc
         z zakresu START i END
      */
    set lib.l08z02_maly;
    retain FMTNAME 'form_id' TYPE 'N'; /* N-numeryczny typ formatu*/
    LABEL = 'ten';
    START = id; END = id;
run;

proc format library = FORM cntlin = FORM.zbior_z_formatem;  /* To minimalny zakres danych potrzebny do zbudowania formatu. */
run;


data lib.zad2(keep=srednia);
    format id form_id.; /* Daję nazwę formatu taką jaką nadałem w swoim stworzonym zbiorze z formatem. */
    set lib.l08z02_duzy end = koniec;
    if vvalue(id) = 'ten' then /* Sprawdzam czy dany id ma etykietę odpowiadającą id ze zbioru małego. */
    do;
        ile_sales + 1;
        suma_sales + sales;
    end;
    if(koniec) then
    do;
        srednia = suma_sales / ile_sales;
        output;
    end;
run;

/*zadanie 3****************************************************************;*/

/* data step */

data L09z03_4GL_to_SQL_fin;
merge lib.L09z03_a(in = ina) lib.L09z03_b(in = inb);
by a b c;
if inb;
if inb and not ina then wskaznik=1;
run;

/* Procedura SQL */

proc sql;
select zbior_b.a, zbior_b.b, zbior_b.c, wskaznik
from
(
    select zbior_b.a, zbior_b.b, zbior_b.c, zbior_a.a, zbior_a.b, zbior_a.c,
    case when (zbior_b.a ^= zbior_a.a
    and zbior_b.b ^= zbior_a.b
    and zbior_b.c ^= zbior_a.c) then 1
    else . end as wskaznik
    from lib.L09z03_b zbior_b
    left join lib.L09z03_a zbior_a
    on zbior_a.a = zbior_b.a and zbior_a.b = zbior_b.b and zbior_a.c = zbior_b.c
)
;
quit;

/*zadanie 4****************************************************************;*/

proc sql;
create table lib.zbior_pom as
select czas.instrument, czas.data as data_czas, pom.data as data_pom,  pom.pomiar,
abs(intck("day", czas.data, pom.data)) as roznica_dat
from lib.l09z04_daty czas
left join lib.l09z04_pomiary pom
on pom.instrument = czas.instrument
order by pom.pomiar desc
;
quit; /* Biorę instrument, wszystkie kombinacje dat z obu plików dla niego oraz dla każdej pary dat różnice dni między tymi datami i pomiar. */

proc sql;
select instrument, data_czas, pomiar
from
(
    select *
    from lib.zbior_pom
    group by instrument, data_czas
    having roznica_dat = min(roznica_dat)
)
group by instrument, data_czas
having pomiar=max(pomiar) /* W przypadku remisu biorę pomiar o większej wartości. */
;
quit;

/*zadanie 5****************************************************************;*/

proc sql;
select distinct studenci.id_studenta as student, odp_im_studenci.id_studenta as odp_mu_student
from lib.l09z05_studenci studenci
inner join lib.l09z05_studenci odp_im_studenci
on odp_im_studenci.id_przedmiotu = studenci.id_przedmiotu;
quit; /* Tutaj mam osoby, które wybrały jakikolwiek przedmiot z przedmiotów studenta, */
/* ale prawdopodobnie to nie jest dobry zbiór wynikowy, ponieważ wszyscy studenci są u wszystkich*/


/* Przedmioty jednego studenta muszą zawierać się w zbiorze przedmiotów drugiej studenta. */
data przed_stud;
set lib.l09z05_studenci;
run;
proc transpose data = przed_stud out = przed_stud(drop=_name_) prefix = przed ;
by id_studenta;
run; /*teraz mam studentów i ich przedmioty w wierszach*/

data przed_stud;
set przed_stud;
ile_przed1 = 0;
if przed1 ^=. then ile_przed1 + 1;
if przed2 ^=. then ile_przed1 + 1;
if przed3 ^=. then ile_przed1 + 1;
if przed4 ^=. then ile_przed1 + 1;
run;

data zad5_wynik;
set przed_stud(rename = (id_studenta = student przed1 = p1 przed2 = p2 przed3 = p3 przed4 = p4 ile_przed1 = ile_przed2));
array odp_studenci[*] odp_student1 - odp_student6;
array tab_pom1[4] p1-p4;
do i=1 to 6;
    if _N_ ^= i then
    do;
        set przed_stud point=i;
        zm_pom = 0;
        array tab_pom2[*] przed1-przed4;
        do j=1 to 4;
            do k=1 to 4;
                if tab_pom1[k] = tab_pom2[j] and tab_pom1[k] ^= . and tab_pom2[j]^=. then zm_pom + 1;
            end;
        end;
        if zm_pom = min(ile_przed1, ile_przed2) then odp_studenci[i] = i;
    end;
    if i = 6 then output;
end;
keep student odp_st:;
run;

/*zadanie 6****************************************************************;*/

/* (1) */

proc format ;
  picture daty_slownie (default = 35)
  other='%B %0d, %0Y' (datatype = date)
  ;
run;

/* Test */

data zad6_1;
format data1 data2 data4 daty_slownie.;
    data1 = '1jan2019'd;
    data2 = 74669;
    data3 = put('4jul2019'd, daty_slownie.);
    data4 = 92933;
output;
    data1 = '1feb2011'd;
    data2 = 84219;
    data3 = put('15aug1999'd, daty_slownie.);
    data4 = 78909;
output;
run;

/* (2) */

proc format;
picture bajty_slownie ( ROUND)
          LOW -< 0 = "Ujemna pojemność - błąd!"
          0 <-< 1024 = "0000B"
          1024 = "1kB" (noedit)
          1024 <-< 1048576 = "0000.000kB" (MULTIPLIER = 9.765625E-01)
          1048576 = "1MB" (noedit)
         1048576 -< 1073741824 = "0000.000MB" (MULTIPLIER = 9.5367431640625E-04) /* 1073741824 = 1048576 * 1024 */
          1073741824 = "1GB" (noedit)
          1073741824 <-< 1099511627776 = "0000.000GB" (MULTIPLIER = 9.31322574615478515625E-7) /* 1099511627776 = 1073741824 * 1024 */
        1099511627776 = "1TB" (noedit)
          other = "Bardzo dużo!"
;
run;

/* Test */

data zbior6_2;
bajty1 = -5;
bajty1_nsform = bajty1;
bajty2 = 570;
bajty2_nsform = bajty2;
bajty3 = 9896;
bajty3_nsform = bajty3;
bajty4 = 340353;
bajty4_nsform = bajty4;
bajty5 = 7904504;
bajty5_nsform = bajty5;
bajty6 = 3573741824;
bajty6_nsform = bajty6;
bajty7 = 21995116277760;
bajty7_nsform = bajty7;
format bajty1 bajty2 bajty3 bajty4 bajty5 bajty6 bajty7 bajty_slownie.;
output;
run;

/*zadanie 7****************************************************************;*/

/* Pomysł: Stworzę zbiór zawierający wszystkie etykiety. Potem utworzę format ze zbioru (na podstawie końca Wykładu 9). */


data zbior_z_formatem_liczby;

length FMTNAME $13 TYPE $1 LABEL1 $8 LABEL2 $15;

retain FMTNAME 'format_liczby' TYPE "N";

  do LABEL = 'zero i zero dziesiątych', 'zero i jedna dziesiąta', 'zero i dwie dziesiąte', 'zero i trzy dziesiąte', 'zero i cztery dziesiąte', 'zero i pięć dziesiątych', 'zero i sześć dziesiątych', 'zero i siedem dziesiątych', 'zero i osiem dziesiątych', 'zero i dziewięć dziesiątych',
  'jeden i zero dziesiątych', 'jeden i jedna dziesiąta', 'jeden i dwie dziesiąte', 'jeden i trzy dziesiąte', 'jeden i cztery dziesiąte', 'jeden i pięć dziesiątych', 'jeden i sześć dziesiątych', 'jeden i siedem dziesiątych', 'jeden i osiem dziesiątych', 'jeden i dziewięć dziesiątych',
  'dwa i zero dziesiątych', 'dwa i jedna dziesiąta', 'dwa i dwie dziesiąte', 'dwa i trzy dziesiąte', 'dwa i cztery dziesiąte', 'dwa i pięć dziesiątych', 'dwa i sześć dziesiątych', 'dwa i siedem dziesiątych', 'dwa i osiem dziesiątych', 'dwa i dziewięć dziesiątych',
'trzy i zero dziesiątych', 'trzy i jedna dziesiąta', 'trzy i dwie dziesiąte', 'trzy i trzy dziesiąte', 'trzy i cztery dziesiąte', 'trzy i pięć dziesiątych', 'trzy i sześć dziesiątych', 'trzy i siedem dziesiątych', 'trzy i osiem dziesiątych', 'trzy i dziewięć dziesiątych',
  'cztery i zero dziesiątych', 'cztery i jedna dziesiąta', 'cztery i dwie dziesiąte', 'cztery i trzy dziesiąte', 'cztery i cztery dziesiąte', 'cztery i pięć dziesiątych', 'cztery i sześć dziesiątych', 'cztery i siedem dziesiątych', 'cztery i osiem dziesiątych', 'cztery i dziewięć dziesiątych',
'pięć i zero dziesiątych', 'pięć i jedna dziesiąta', 'pięć i dwie dziesiąte', 'pięć i trzy dziesiąte', 'pięć i cztery dziesiąte', 'pięć i pięć dziesiątych', 'pięć i sześć dziesiątych', 'pięć i siedem dziesiątych', 'pięć i osiem dziesiątych', 'pięć i dziewięć dziesiątych',
  'sześć i zero dziesiątych', 'sześć i jedna dziesiąta', 'sześć i dwie dziesiąte', 'sześć i trzy dziesiąte', 'sześć i cztery dziesiąte', 'sześć i pięć dziesiątych', 'sześć i sześć dziesiątych', 'sześć i siedem dziesiątych', 'sześć i osiem dziesiątych', 'sześć i dziewięć dziesiątych',
'siedem i zero dziesiątych', 'siedem i jedna dziesiąta', 'siedem i dwie dziesiąte', 'siedem i trzy dziesiąte', 'siedem i cztery dziesiąte', 'siedem i pięć dziesiątych', 'siedem i sześć dziesiątych', 'siedem i siedem dziesiątych', 'siedem i osiem dziesiątych', 'siedem i dziewięć dziesiątych',
  'osiem i zero dziesiątych', 'osiem i jedna dziesiąta', 'osiem i dwie dziesiąte', 'osiem i trzy dziesiąte', 'osiem i cztery dziesiąte', 'osiem i pięć dziesiątych', 'osiem i sześć dziesiątych', 'osiem i siedem dziesiątych', 'osiem i osiem dziesiątych', 'osiem i dziewięć dziesiątych',
'dziewięć i zero dziesiątych', 'dziewięć i jedna dziesiąta', 'dziewięć i dwie dziesiąte', 'dziewięć i trzy dziesiąte', 'dziewięć i cztery dziesiąte', 'dziewięć i pięć dziesiątych', 'dziewięć i sześć dziesiątych', 'dziewięć i siedem dziesiątych', 'dziewięć i osiem dziesiątych', 'dziewięć i dziewięć dziesiątych'
  ;
      output;
          START+0.1;
          END+0.1;
     end;
  retain i 0 j 0;
run;

proc format library = WORK cntlin = zbior_z_formatem_liczby;  /* To minimalny zakres danych potrzebny do zbudowania formatu. */
run;


/* Test */

data lib.zbior7;
x = 0.6; output;
x = 1.2; output;
x = 2.3; output;
x = 2.7; output;
x = 3.4; output;
x = 5.6; output;
x = 6.6; output;
x = 7.1; output;
x = 7.2; output;
x = 8.0; output;
run;

data lib.zad7;
set lib.zbior7;
x_niesform = x;
format x format_liczby.;
run;
